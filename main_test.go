package main

import (
	"crypto/x509/pkix"
	"encoding/asn1"
	"fmt"
	"github.com/roy19831015/gmsm/log"
	"github.com/roy19831015/gmsm/ucapp4go"
	"github.com/roy19831015/gmsm/x509"
	"io/ioutil"
	"math/big"
	"os"
	"testing"
)

func Test(t *testing.T) {
	str := "MIIH8QYJKoZIhvcNAQcCoIIH4jCCB94CAQExADALBgkqhkiG9w0BBwGgggfGMIIBszCCAVegAwIBAgIIaeL+wBcKxnswDAYIKoEcz1UBg3UFADAuMQswCQYDVQQGEwJDTjEOMAwGA1UECgwFTlJDQUMxDzANBgNVBAMMBlJPT1RDQTAeFw0xMjA3MTQwMzExNTlaFw00MjA3MDcwMzExNTlaMC4xCzAJBgNVBAYTAkNOMQ4wDAYDVQQKDAVOUkNBQzEPMA0GA1UEAwwGUk9PVENBMFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAEMPCca6pmgcchsTf2UnBeL9rtp4nw+itk1Kzrmbnqo05lUwkwlWK+4OIrtFdAqnRTV7Q9v1htkv42TsIutzd126NdMFswHwYDVR0jBBgwFoAUTDKxl9kzG8SmBcHG5YtiW/CXdlgwDAYDVR0TBAUwAwEB/zALBgNVHQ8EBAMCAQYwHQYDVR0OBBYEFEwysZfZMxvEpgXBxuWLYlvwl3ZYMAwGCCqBHM9VAYN1BQADSAAwRQIgG1bSLeOXp3oB8H7b53W+CKOPl2PknmWEq/lMhtn25HkCIQDaHDgWxWFtnCrBjH16/W3Ezn7/U/Vjo5xIpDoiVhsLwjCCAtswggKAoAMCAQICEGK7HIIk+dCsvpf6mJmBM9QwDAYIKoEcz1UBg3UFADAuMQswCQYDVQQGEwJDTjEOMAwGA1UECgwFTlJDQUMxDzANBgNVBAMMBlJPT1RDQTAeFw0xMzAxMTkwMjQ4MzdaFw0zMzAxMTQwMjQ4MzdaMIGHMQswCQYDVQQGEwJDTjEOMAwGA1UECAwFSHViZWkxDjAMBgNVBAcMBVd1aGFuMTswOQYDVQQKDDJIdWJlaSBEaWdpdGFsIENlcnRpZmljYXRlIEF1dGhvcml0eSBDZW50ZXIgQ08gTHRkLjEMMAoGA1UECwwDRUNDMQ0wCwYDVQQDDARIQkNBMFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAEUAWD1IYgJWreu8CIHR6OuF0GO+tmWAvGjTK5tdXxL1OzNepDWVHPQ91iiNDmLHMlFpJoSVhrQtUE9mBLrTRPkaOCASIwggEeMB8GA1UdIwQYMBaAFEwysZfZMxvEpgXBxuWLYlvwl3ZYMA8GA1UdEwEB/wQFMAMBAf8wgboGA1UdHwSBsjCBrzBBoD+gPaQ7MDkxCzAJBgNVBAYTAkNOMQ4wDAYDVQQKDAVOUkNBQzEMMAoGA1UECwwDQVJMMQwwCgYDVQQDDANhcmwwKqAooCaGJGh0dHA6Ly93d3cucm9vdGNhLmdvdi5jbi9hcmwvYXJsLmNybDA+oDygOoY4bGRhcDovL2xkYXAucm9vdGNhLmdvdi5jbjozODkvQ049YXJsLE9VPUFSTCxPPU5SQ0FDLEM9Q04wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBT2SeesVNPH/W09FpNc6yhZ49NALTAMBggqgRzPVQGDdQUAA0cAMEQCID5NAOP8Oqhmc6Wwr8GYM2u+9GzBfkOcXLWz7lDE5hO8AiAUh4IawQ2pNDFK3suF8G5k3toWFDKnmdvjn3cKEy/IIzCCAywwggLQoAMCAQICEH8uBucHYikkvGmLqn6xlA0wDAYIKoEcz1UBg3UFADCBhzELMAkGA1UEBhMCQ04xDjAMBgNVBAgMBUh1YmVpMQ4wDAYDVQQHDAVXdWhhbjE7MDkGA1UECgwySHViZWkgRGlnaXRhbCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgQ2VudGVyIENPIEx0ZC4xDDAKBgNVBAsMA0VDQzENMAsGA1UEAwwESEJDQTAeFw0yMDA0MTMwODI2MjNaFw0yMzA0MTMwODI2MjNaMFIxCzAJBgNVBAYTAkNOMQ4wDAYDVQQIDAVIdUJlaTEOMAwGA1UEBwwFV3VIYW4xDDAKBgNVBAoMA1NNMjEVMBMGA1UEAwwM5Zu95rOw5paw54K5MFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAE68bwiK9pnEefbXa0RwMDW5dTs3F+2JYn51YiDAsye4dj/1GGMO0PxlCL5RLjJ7laxKN6Bk1byd18pCaE/8Snt6OCAU4wggFKMB8GA1UdIwQYMBaAFPZJ56xU08f9bT0Wk1zrKFnj00AtMA8GA1UdEwQIMAYBAf8CAQEwgekGA1UdHwSB4TCB3jA0oDKgMKQuMCwxCzAJBgNVBAYTAkNOMQwwCgYDVQQLDANDUkwxDzANBgNVBAMMBmNybDMwMTAvoC2gK4YpaHR0cDovL3d3dy5oYmNhLm9yZy5jbi9jcmxfc20yL2NybDMwMS5jcmwwdaBzoHGGb2xkYXA6Ly8yMjEuMjMyLjIyNC43NDozODkvQ049Y3JsMzAxLE9VPUNSTCxDPUNOP2NlcnRpZmljYXRlUmV2b2NhdGlvbkxpc3Q/YmFzZT9vYmplY3RjbGFzcz1jUkxEaXN0cmlidXRpb25Qb2ludDALBgNVHQ8EBAMCAf4wHQYDVR0OBBYEFHfjRu098tYNul6srWIssQ8yClYbMAwGCCqBHM9VAYN1BQADSAAwRQIgMuoH3SDrAgV33Pc0O8icn/H1xnivPr8ruLG6p0ohqNsCIQDhzrkOtCqm5XA6Iar+iEllhInbe+dxqi0P8lRxFhcyTjEA"
	data, _ := ucapp4go.Base64Decode(str)
	certs, err := ucapp4go.GetCertFromP7SignedData(data)
	if err != nil {
		return
	}
	//fmt.Printf(certs[0].GetSubject())
	certp := []*x509.Certificate{certs[0].X509Cert}
	b, err := x509.NewP7B(certp)
	if err != nil {
		return
	}
	finish, err := b.DirectFinish()
	if err != nil {
		return
	}
	encode, err := ucapp4go.Base64Encode(finish)
	if err != nil {
		return
	}
	fmt.Printf(encode)
}

func Test2(t *testing.T) {
	sm2p12base64 := "MIIFaAIBAzCCBTIGCSqGSIb3DQEHAaCCBSMEggUfMIIFGzCCA/8GCSqGSIb3DQEHBqCCA/AwggPsAgEAMIID5QYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQYwDgQIINZxa66AiK8CAggAgIIDuGrw1IUvHB0vx1OncMWpViwC+uZHwZd2M4uMimt8fudiKzyQj2CwAVD2FIx+bTZdK0hTJdXNpy9IGviV1NXkslO0yPuSg/W7KJceE8OW/ADXtODZRa2fpxesV2udkrW9tZsn6sCVFt0y2Qwp0Z8UsVRFsBHavVUNJLJqQovfs/1kDObgbkS7IusuVyVa6dgkq5wX+k6YKXoqoTJOZsyBDcrJkLlOqqM2IT9vglZHKrijdRExViB4+ydtYj0PoOmWvehnz1BqI0f+7unmJZghha8qbTUNNd8RX0EAIYqM+ZvRrdEBYlmqRlGNThZQV81vp4p1NEc1G1hAAZ5F3YVwK83DD9O+SflwlHpV3662rGEWtOVUdC8g6huIB2XVY0OlfBV1GZOku71z0VNCsx2G648ZpyQDyW6/Qk8L2Q/VLEECvFlats1SKENffhgPIT2YuMkcYpColG9DwK5yuHf4PxLzVjNwB9DBha8zXEADIDbfS04ca90rjVP/0VF9dSqYqdn6Cvp39qZNWBAuNEzhAfn7yI3FNpzvKQboGp5H8uVPXrNuN7/hPU32PhGKfaIdeSj87owIXQu36/GSjvNmluS1oa+CF2cpnMgV0d+3JJZnUj5zM5c+s8Cugk3oSCV8pLsb/TE+IMmhSuq1PwT1ehqzTjYVnFriTp9f6bpc1pQKQVS1bVFdxjlHAoNwQFOL+OwjCyf3VLTxzwlCNHONUcWvUWziuyiHvjFgnO2JRfcKAlP3Uf2ahutCjBAeYHRRni+ujbbDJ8WjZu+8/rFUXaL1JmFXnMcLJJhrFXEzdKWCmmrvt9lXVm8i1+0naRw+AX/niGP8b7k6NuFsl0i5RkCIrO6yaA4bW0aRmCIQqiSDwG+ekP5n6u21iz25gKSJ1WRP9rnhMnCBW1enNEuwHCUq4gwkC9A2rQUoMd5Xc9iPGrnx66pORAbEhKWfu9xUH+nOvxRxlhqvSdQCGOdI0CnsZmkB7+oTZp6OUk6tftJAYRfN396V3M3r4nXAo/bmY3H6aD1Y9IXocW3EwKb417JTavt0l8eeOv2gLYh1XC1hf323I7+ebVklxPSJkFILxhZ7a/LQZYDRAzgIZljuSoH9AquXabDtZiWq1wYMqCgFNQiC2Rdxh6Z+T5rAdaFx825FqxPV5sVnNwikNl744LtqX6OwGWFfXJ2UOiaMQnjvWyeRAw+iAQNa+ZG5VShD0Hu3LT8aOx7jYvhpwv+FlwSN5ylO7jpcCetLrrfM+vgnhRKu6sa5KaowggEUBgkqhkiG9w0BBwGgggEFBIIBATCB/jCB+wYLKoZIhvcNAQwKAQKggcQwgcEwHAYKKoZIhvcNAQwBAzAOBAij0aY8+HRpSQICCAAEgaDqGnBLsA5WPMKKRHe21juBxLDI3ni57PCuL8ffWpjjs31AYQZdlCEINpfarpyTefqX16fsOBg89K5PuVI9w1D5EWi/pK1I3qPBs9LaPJ2gILrITIJKewl7jw4jLu1KGO9hFJf7pKC4QyjmpbUh3lwPwkyDjR6gzHze5MWDZn4l6dg60jCHLdMSUQj5wWVEdBkmEQm7k6xQzOeY79xOVGv9MSUwIwYJKoZIhvcNAQkVMRYEFMuZB1+y6r8bXUd4DR1u+eiN+z1fMC0wITAJBgUrDgMCGgUABBSpxjw2YE9S8dmKQp7udX+56iYAvwQInpHqunXXeKo="
	sm2p12pin := "11111111"
	sm2certx, err := ucapp4go.PKCS12ParseCert(sm2p12base64, sm2p12pin)
	if err != nil {
		log.Error("SM2构造证书对象错误，" + err.Error())
		return
	}

	str := "MIIH8QYJKoZIhvcNAQcCoIIH4jCCB94CAQExADALBgkqhkiG9w0BBwGgggfGMIIBszCCAVegAwIBAgIIaeL+wBcKxnswDAYIKoEcz1UBg3UFADAuMQswCQYDVQQGEwJDTjEOMAwGA1UECgwFTlJDQUMxDzANBgNVBAMMBlJPT1RDQTAeFw0xMjA3MTQwMzExNTlaFw00MjA3MDcwMzExNTlaMC4xCzAJBgNVBAYTAkNOMQ4wDAYDVQQKDAVOUkNBQzEPMA0GA1UEAwwGUk9PVENBMFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAEMPCca6pmgcchsTf2UnBeL9rtp4nw+itk1Kzrmbnqo05lUwkwlWK+4OIrtFdAqnRTV7Q9v1htkv42TsIutzd126NdMFswHwYDVR0jBBgwFoAUTDKxl9kzG8SmBcHG5YtiW/CXdlgwDAYDVR0TBAUwAwEB/zALBgNVHQ8EBAMCAQYwHQYDVR0OBBYEFEwysZfZMxvEpgXBxuWLYlvwl3ZYMAwGCCqBHM9VAYN1BQADSAAwRQIgG1bSLeOXp3oB8H7b53W+CKOPl2PknmWEq/lMhtn25HkCIQDaHDgWxWFtnCrBjH16/W3Ezn7/U/Vjo5xIpDoiVhsLwjCCAtswggKAoAMCAQICEGK7HIIk+dCsvpf6mJmBM9QwDAYIKoEcz1UBg3UFADAuMQswCQYDVQQGEwJDTjEOMAwGA1UECgwFTlJDQUMxDzANBgNVBAMMBlJPT1RDQTAeFw0xMzAxMTkwMjQ4MzdaFw0zMzAxMTQwMjQ4MzdaMIGHMQswCQYDVQQGEwJDTjEOMAwGA1UECAwFSHViZWkxDjAMBgNVBAcMBVd1aGFuMTswOQYDVQQKDDJIdWJlaSBEaWdpdGFsIENlcnRpZmljYXRlIEF1dGhvcml0eSBDZW50ZXIgQ08gTHRkLjEMMAoGA1UECwwDRUNDMQ0wCwYDVQQDDARIQkNBMFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAEUAWD1IYgJWreu8CIHR6OuF0GO+tmWAvGjTK5tdXxL1OzNepDWVHPQ91iiNDmLHMlFpJoSVhrQtUE9mBLrTRPkaOCASIwggEeMB8GA1UdIwQYMBaAFEwysZfZMxvEpgXBxuWLYlvwl3ZYMA8GA1UdEwEB/wQFMAMBAf8wgboGA1UdHwSBsjCBrzBBoD+gPaQ7MDkxCzAJBgNVBAYTAkNOMQ4wDAYDVQQKDAVOUkNBQzEMMAoGA1UECwwDQVJMMQwwCgYDVQQDDANhcmwwKqAooCaGJGh0dHA6Ly93d3cucm9vdGNhLmdvdi5jbi9hcmwvYXJsLmNybDA+oDygOoY4bGRhcDovL2xkYXAucm9vdGNhLmdvdi5jbjozODkvQ049YXJsLE9VPUFSTCxPPU5SQ0FDLEM9Q04wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBT2SeesVNPH/W09FpNc6yhZ49NALTAMBggqgRzPVQGDdQUAA0cAMEQCID5NAOP8Oqhmc6Wwr8GYM2u+9GzBfkOcXLWz7lDE5hO8AiAUh4IawQ2pNDFK3suF8G5k3toWFDKnmdvjn3cKEy/IIzCCAywwggLQoAMCAQICEH8uBucHYikkvGmLqn6xlA0wDAYIKoEcz1UBg3UFADCBhzELMAkGA1UEBhMCQ04xDjAMBgNVBAgMBUh1YmVpMQ4wDAYDVQQHDAVXdWhhbjE7MDkGA1UECgwySHViZWkgRGlnaXRhbCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgQ2VudGVyIENPIEx0ZC4xDDAKBgNVBAsMA0VDQzENMAsGA1UEAwwESEJDQTAeFw0yMDA0MTMwODI2MjNaFw0yMzA0MTMwODI2MjNaMFIxCzAJBgNVBAYTAkNOMQ4wDAYDVQQIDAVIdUJlaTEOMAwGA1UEBwwFV3VIYW4xDDAKBgNVBAoMA1NNMjEVMBMGA1UEAwwM5Zu95rOw5paw54K5MFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAE68bwiK9pnEefbXa0RwMDW5dTs3F+2JYn51YiDAsye4dj/1GGMO0PxlCL5RLjJ7laxKN6Bk1byd18pCaE/8Snt6OCAU4wggFKMB8GA1UdIwQYMBaAFPZJ56xU08f9bT0Wk1zrKFnj00AtMA8GA1UdEwQIMAYBAf8CAQEwgekGA1UdHwSB4TCB3jA0oDKgMKQuMCwxCzAJBgNVBAYTAkNOMQwwCgYDVQQLDANDUkwxDzANBgNVBAMMBmNybDMwMTAvoC2gK4YpaHR0cDovL3d3dy5oYmNhLm9yZy5jbi9jcmxfc20yL2NybDMwMS5jcmwwdaBzoHGGb2xkYXA6Ly8yMjEuMjMyLjIyNC43NDozODkvQ049Y3JsMzAxLE9VPUNSTCxDPUNOP2NlcnRpZmljYXRlUmV2b2NhdGlvbkxpc3Q/YmFzZT9vYmplY3RjbGFzcz1jUkxEaXN0cmlidXRpb25Qb2ludDALBgNVHQ8EBAMCAf4wHQYDVR0OBBYEFHfjRu098tYNul6srWIssQ8yClYbMAwGCCqBHM9VAYN1BQADSAAwRQIgMuoH3SDrAgV33Pc0O8icn/H1xnivPr8ruLG6p0ohqNsCIQDhzrkOtCqm5XA6Iar+iEllhInbe+dxqi0P8lRxFhcyTjEA"
	data, _ := ucapp4go.Base64Decode(str)
	certs, err := ucapp4go.GetCertFromP7SignedData(data)
	if err != nil {
		log.Error("从P7B中获取SM2证书对象错误，" + err.Error())
		return
	}
	b64, err := sm2certx.GetPriKeyB64()
	if err != nil {
		log.Error("SM2获取私钥Base64错误，" + err.Error())
		return
	}
	decode, err := ucapp4go.Base64Decode(b64)
	if err != nil {
		log.Error("私钥的Base64解码错误，" + err.Error())
		return
	}
	out, err := certs[0].EncryptExchangeKeyWithSignCert(decode)
	if err != nil {
		log.Error("使用签名密钥加密加密密钥对错误，" + err.Error())
		return
	}
	println("out:" + out)
}

func Test3(t *testing.T) {
	var crl pkix.CertificateList
	file, err := os.Open("C:\\Users\\Roy\\OneDrive\\桌面\\crl (1).crl")
	if err != nil {
		log.Error("错误，" + err.Error())
		return
	}
	all, err := ioutil.ReadAll(file)
	if err != nil {
		log.Error("错误，" + err.Error())
		return
	}
	_, err = asn1.Unmarshal(all, &crl)
	if err != nil {
		log.Error("错误，" + err.Error())
		return
	}
	no,_ :=big.NewInt(0).SetString("31AEFFD529775A2F52D66AEE8B1363E0",16)
	for _, r := range crl.TBSCertList.RevokedCertificates {
		if r.SerialNumber.Cmp(no)==0{
			log.Info("CRL中找到该序列号")
			return
		}
	}
	log.Info("CRL中未找到该序列号")
}
